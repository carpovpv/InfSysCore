/*    Copyright (C) 2009  Carpov P.V. carpovpv@mail.ru    LAP_DataGrid a class providing flexible behaviour of standard    QTableView class.        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/#include "lap_combobox.h"#include <QComboBox>#include <QSqlQuery>#include <QMessageBox>// place your code hereLAP_ComboBoxDelegate::LAP_ComboBoxDelegate(QObject *parent, QString sql ) :        QItemDelegate(parent), _sql(sql){    QSqlQuery query;    query.exec(_sql);    _data.clear();    while (query.next())    {        QVector<QVariant> temp;        temp.push_back(query.value(0));        temp.push_back(query.value(1));        _data.push_back(temp);    }}QWidget * LAP_ComboBoxDelegate::createEditor(QWidget *parent,        const QStyleOptionViewItem &/* option */,        const QModelIndex &/* index */) const{    QComboBox *editor = new QComboBox(parent);    for (int i =0; i < _data.size() ; ++i)        editor->addItem(_data[i][1].toString(), _data[i][0]);    return editor;}void LAP_ComboBoxDelegate::setEditorData(QWidget *editor,        const QModelIndex &index) const{    QString value = index.model()->data(index, Qt::DisplayRole).toString();    QComboBox *cmbBox = static_cast<QComboBox*>(editor);    int cur = cmbBox->findText(value);    cmbBox->setCurrentIndex(cur);}void LAP_ComboBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,                                        const QModelIndex &index) const{    QComboBox *cmbBox = static_cast<QComboBox*>(editor);    QVariant value = cmbBox->itemData(cmbBox->currentIndex());    model->setData(index, value, Qt::EditRole);}void LAP_ComboBoxDelegate::updateEditorGeometry(QWidget *editor,        const QStyleOptionViewItem &option, const QModelIndex &/* index */) const{    editor->setGeometry(option.rect);}