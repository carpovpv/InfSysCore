/*    Copyright (C) 2009  Carpov P.V. carpovpv@mail.ru    LAP_DataGrid a class providing flexible behaviour of standard    QTableView class.        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/#include "lap_lineedit.h"// place your code here#include <QMessageBox>// place your code hereLAP_LineEditDelegate::LAP_LineEditDelegate(QObject *parent, QString valid)        : QItemDelegate(parent), _valid(valid){}QWidget *LAP_LineEditDelegate::createEditor(QWidget *parent,        const QStyleOptionViewItem &/* option */,        const QModelIndex &/* index */) const{    QLineEdit *editor = new QLineEdit(parent);    if (_valid!="")    {        QRegExpValidator *validator = new QRegExpValidator(\                QRegExp(_valid),parent);        editor->setValidator(validator);    }    return editor;}void LAP_LineEditDelegate::setEditorData(QWidget *editor,        const QModelIndex &index) const{    QString value = index.model()->data(index, Qt::DisplayRole).toString();    QLineEdit *lineEdit = static_cast<QLineEdit*>(editor);    lineEdit->setText(value);}void LAP_LineEditDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,                                        const QModelIndex &index) const{    QLineEdit *lineEdit = static_cast<QLineEdit*>(editor);    QString value = lineEdit->text();    model->setData(index, value, Qt::EditRole);}void LAP_LineEditDelegate::updateEditorGeometry(QWidget *editor,        const QStyleOptionViewItem &option, const QModelIndex &/* index */) const{    editor->setGeometry(option.rect);}